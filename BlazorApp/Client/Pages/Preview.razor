@page "/preview"
@using BlazorApp.Client.Pages
@using BlazorApp.Shared

<div id="mainDiv" class="d-flex flex-column align-items-center" style="min-height: 100vh; background-color: #e0c887;">
    <div class="text-center mb-1">
        <h6 class="fw-bold mb-1">Preview Mode (@CanvasState.SelectedView view)</h6>
    </div>
    <div id="canvas-wrapper" class="flex-grow-1 w-100 d-flex justify-content-center align-items-start overflow-auto">
        <div id="canvas-inner"
             class="position-relative rounded border bg-white shadow"
             style="width: @(previewWidth)px; height: @(previewHeight)px">
              
                @foreach (var control in CanvasState.Controls)
                {
                <div class="position-absolute" style="
                     left:@(control.X * ScaleX)px;
                     top:@(control.Y * ScaleY)px;
                     min-width: @(150 * ScaleX)px;">
                        <div class="mb-2">
                            @switch (control.Type)
                            {
                            case "TextInput":
                                <div class="mb-3">
                                    <label class="control-label">@control.Label</label>
                                    <input class="form-control" type="text"
                                           placeholder="@control.Placeholder"
                                           value="@control.DefaultValue" />
                                </div>
                                break;

                            case "NumberInput":
                                <div class="mb-3">
                                    <label class="control-label">@control.Label</label>
                                    <input class="form-control" type="number"
                                           placeholder="@control.Placeholder"
                                           value="@control.DefaultValue" />
                                </div>
                                break;

                            case "Dropdown":
                                <div class="mb-3">
                                    <label class="control-label">@control.Label</label>
                                    <select class="form-select">
                                        <option disabled selected>@control.Placeholder</option>
                                        @foreach (var option in control.Options.Where(o => !string.IsNullOrWhiteSpace(o)))
                                        {
                                            <option>@option</option>
                                        }
                                    </select>
                                </div>
                                break;

                            case "Checkbox":
                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox"
                                           checked="@("true".Equals(control.DefaultValue, StringComparison.OrdinalIgnoreCase))"
                                           id="chk_@control.Id" />
                                    <label class="form-check-label ms-1" for="chk_@control.Id">
                                        @control.Label
                                    </label>
                                </div>
                                break;

                            case "DatetimePicker":
                                <div class="mb-3">
                                    <label class="control-label">@control.Label</label>
                                    <input class="form-control" type="datetime-local"
                                           value="@control.DefaultValue" />
                                </div>
                                break;

                            case "Button":
                                <button class="btn btn-primary" style="min-width: 300px;">
                                    @(!string.IsNullOrWhiteSpace(control.DefaultValue) ? control.DefaultValue : control.Label)
                                </button>
                                break;

                            }
                        </div>
                    </div>
                }
            </div>
    </div>
</div>

