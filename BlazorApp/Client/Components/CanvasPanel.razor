<div class="canvas-panel d-flex flex-column h-100">

    <div id="canvas-dropzone"
         class="canvas-dropzone"
    @onclick="() => ClearSelection()">

        @if (CanvasControls == null || CanvasControls.Count == 0)
        {
            <p class="text-muted text-center">Drop a control here to start building</p>
        }
        else
        {
            @foreach (var control in CanvasControls)
            {
                <div class="control-item draggable @(control == SelectedControl ? "selected-control" : "")"
                     id="control-@control.Id"
                     style="position: absolute; left: @(control.X)px; top: @(control.Y)px;"
                @onclick:stopPropagation
                @onclick="() => HandleControlSelect(control)">

                    @if (control == SelectedControl)
                    {
                        <button class="delete-btn" @onclick:stopPropagation @onclick="() => RemoveControl(control)">
                            &times;
                        </button>
                    }

                    <div class="draggable-inner">
                        @switch (control.Type)
                        {
                            case "TextInput":
                                <label class="form-label small">@control.Label</label>
                                <input class="form-control form-control-sm"
                                       type="text"
                                       placeholder="@control.Placeholder"
                                       value="@control.DefaultValue"
                                       readonly />
                                break;

                            case "NumberInput":
                                <label class="form-label small">@control.Label</label>
                                <input class="form-control form-control-sm"
                                       type="number"
                                       placeholder="@control.Placeholder"
                                       value="@control.DefaultValue"
                                       readonly />
                                break;

                            case "Dropdown":
                                <div class="d-flex flex-column gap-1">
                                    <label class="form-label small text-muted">@control.Label</label>
                                    <select class="form-select form-select-sm" disabled>
                                        <option disabled selected>@(control.Placeholder ?? "Select an option")</option>
                                    </select>
                                </div>
                                break;

                            case "DatetimePicker":
                                <div class="d-flex flex-column gap-1">
                                    <label class="form-label small text-muted">@control.Label</label>
                                    <input class="form-control form-control-sm"
                                           type="datetime-local"
                                           value="@control.DefaultValue"
                                           readonly />
                                </div>
                                break;

                            case "Button":
                                <div class="d-flex flex-column gap-1">
                                    <div class="btn btn-sm btn-secondary w-100 disabled" style="pointer-events: none; min-width: 190px;">
                                        @(!string.IsNullOrWhiteSpace(control.DefaultValue) ? control.DefaultValue : control.Label)
                                    </div>
                                </div>
                                break;

                            case "Checkbox":
                                <div class="d-flex align-items-center gap-2">
                                    <input type="checkbox"
                                           class="form-check-input m-0"
                                           disabled
                                           checked="@("true".Equals(control.DefaultValue, StringComparison.OrdinalIgnoreCase))" />
                                    <label class="form-check-label m-0 small text-body">@control.Label</label>
                                </div>
                                break;

                            default:
                                <span>@control.Label (@control.Type)</span>
                                break;
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>